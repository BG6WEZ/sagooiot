// ================================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// You can delete these comments if you wish manually maintain this interface file.
// ================================================================================

package service

import (
	"context"
	"github.com/sagoo-cloud/sagooiot/api/v1/common"
	"github.com/sagoo-cloud/sagooiot/internal/model"
	"github.com/sagoo-cloud/sagooiot/internal/model/entity"

	"github.com/gogf/gf/v2/net/ghttp"
)

type (
	IBaseDbLink interface {
		GetList(ctx context.Context, input *model.BaseDbLinkDoInput) (total int, out []*model.BaseDbLinkOut, err error)
		Add(ctx context.Context, input *model.AddBaseDbLinkInput) (err error)
		Detail(ctx context.Context, baseDbLinkId int) (entity *entity.BaseDbLink, err error)
		Edit(ctx context.Context, input *model.EditBaseDbLinkInput) (err error)
		Del(ctx context.Context, BaseDbLinkId int) (err error)
	}
	ICityData interface {
		GetList(ctx context.Context, status int, name string, code string) (data []*entity.CityData, err error)
		Add(ctx context.Context, city *entity.CityData) (err error)
		Edit(ctx context.Context, city *entity.CityData) (err error)
		GetInfoById(ctx context.Context, id int) (cityInfo *entity.CityData, err error)
		DelById(ctx context.Context, id int) (err error)
		GetAll(ctx context.Context) (data []*entity.CityData, err error)
	}
	IConfigData interface {
		List(ctx context.Context, input *model.ConfigDoInput) (total int, out []*model.SysConfigOut, err error)
		Add(ctx context.Context, input *model.AddConfigInput, userId int) (err error)
		CheckConfigKeyUnique(ctx context.Context, configKey string, configId ...int) (err error)
		Get(ctx context.Context, id int) (out *model.SysConfigOut, err error)
		Edit(ctx context.Context, input *model.EditConfigInput, userId int) (err error)
		Delete(ctx context.Context, ids []int) (err error)
		GetConfigByKey(ctx context.Context, key string) (config *entity.SysConfig, err error)
		GetByKey(ctx context.Context, key string) (config *entity.SysConfig, err error)
	}
	IDictData interface {
		GetDictWithDataByType(ctx context.Context, input *model.GetDictInput) (dict *model.GetDictOut, err error)
		List(ctx context.Context, input *model.SysDictSearchInput) (total int, out []*model.SysDictDataOut, err error)
		Add(ctx context.Context, input *model.AddDictDataInput, userId int) (err error)
		Get(ctx context.Context, dictCode uint) (out *model.SysDictDataOut, err error)
		Edit(ctx context.Context, input *model.EditDictDataInput, userId int) (err error)
		Delete(ctx context.Context, ids []int) (err error)
	}
	IDictType interface {
		List(ctx context.Context, input *model.DictTypeDoInput) (total int, out []*model.SysDictTypeInfoOut, err error)
		Add(ctx context.Context, input *model.AddDictTypeInput, userId int) (err error)
		Edit(ctx context.Context, input *model.EditDictTypeInput, userId int) (err error)
		Get(ctx context.Context, req *common.DictTypeGetReq) (dictType *model.SysDictTypeOut, err error)
		ExistsDictType(ctx context.Context, dictType string, dictId ...int) (err error)
		Delete(ctx context.Context, dictIds []int) (err error)
	}
	IUpload interface {
		UploadFiles(ctx context.Context, files []*ghttp.UploadFile, checkFileType string, source int) (result common.UploadMultipleRes, err error)
		UploadFile(ctx context.Context, file *ghttp.UploadFile, checkFileType string, source int) (result common.UploadResponse, err error)
		UploadTencent(ctx context.Context, file *ghttp.UploadFile) (result common.UploadResponse, err error)
		UploadLocal(ctx context.Context, file *ghttp.UploadFile) (result common.UploadResponse, err error)
		CheckSize(ctx context.Context, checkFileType string, file *ghttp.UploadFile) (err error)
		CheckType(ctx context.Context, checkFileType string, file *ghttp.UploadFile) (err error)
	}
)

var (
	localUpload     IUpload
	localBaseDbLink IBaseDbLink
	localCityData   ICityData
	localConfigData IConfigData
	localDictData   IDictData
	localDictType   IDictType
)

func BaseDbLink() IBaseDbLink {
	if localBaseDbLink == nil {
		panic("implement not found for interface IBaseDbLink, forgot register?")
	}
	return localBaseDbLink
}

func RegisterBaseDbLink(i IBaseDbLink) {
	localBaseDbLink = i
}

func CityData() ICityData {
	if localCityData == nil {
		panic("implement not found for interface ICityData, forgot register?")
	}
	return localCityData
}

func RegisterCityData(i ICityData) {
	localCityData = i
}

func ConfigData() IConfigData {
	if localConfigData == nil {
		panic("implement not found for interface IConfigData, forgot register?")
	}
	return localConfigData
}

func RegisterConfigData(i IConfigData) {
	localConfigData = i
}

func DictData() IDictData {
	if localDictData == nil {
		panic("implement not found for interface IDictData, forgot register?")
	}
	return localDictData
}

func RegisterDictData(i IDictData) {
	localDictData = i
}

func DictType() IDictType {
	if localDictType == nil {
		panic("implement not found for interface IDictType, forgot register?")
	}
	return localDictType
}

func RegisterDictType(i IDictType) {
	localDictType = i
}

func Upload() IUpload {
	if localUpload == nil {
		panic("implement not found for interface IUpload, forgot register?")
	}
	return localUpload
}

func RegisterUpload(i IUpload) {
	localUpload = i
}
