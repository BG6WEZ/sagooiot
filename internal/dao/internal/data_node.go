// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// DataNodeDao is the data access object for table data_node.
type DataNodeDao struct {
	table   string          // table is the underlying table name of the DAO.
	group   string          // group is the database configuration group name of current DAO.
	columns DataNodeColumns // columns contains all the column names of Table for convenient usage.
}

// DataNodeColumns defines and stores column names for table data_node.
type DataNodeColumns struct {
	NodeId    string //
	SourceId  string // 数据源ID
	Name      string // 数据节点名称
	Key       string // 数据节点标识
	DataType  string // 数据类型
	Value     string // 取值项
	IsPk      string // 是否主键：0=否，1=是
	Rule      string // 规则配置json
	CreateBy  string // 创建者
	UpdateBy  string // 更新者
	DeletedBy string // 删除者
	CreatedAt string // 创建时间
	UpdatedAt string // 更新时间
	DeletedAt string // 删除时间
}

//  dataNodeColumns holds the columns for table data_node.
var dataNodeColumns = DataNodeColumns{
	NodeId:    "node_id",
	SourceId:  "source_id",
	Name:      "name",
	Key:       "key",
	DataType:  "data_type",
	Value:     "value",
	IsPk:      "is_pk",
	Rule:      "rule",
	CreateBy:  "create_by",
	UpdateBy:  "update_by",
	DeletedBy: "deleted_by",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

// NewDataNodeDao creates and returns a new DAO object for table data access.
func NewDataNodeDao() *DataNodeDao {
	return &DataNodeDao{
		group:   "default",
		table:   "data_node",
		columns: dataNodeColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *DataNodeDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *DataNodeDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *DataNodeDao) Columns() DataNodeColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *DataNodeDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *DataNodeDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *DataNodeDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
