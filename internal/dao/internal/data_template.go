// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// DataTemplateDao is the data access object for table data_template.
type DataTemplateDao struct {
	table   string              // table is the underlying table name of the DAO.
	group   string              // group is the database configuration group name of current DAO.
	columns DataTemplateColumns // columns contains all the column names of Table for convenient usage.
}

// DataTemplateColumns defines and stores column names for table data_template.
type DataTemplateColumns struct {
	Id             string // ID
	Name           string // 名称
	Key            string // 标识
	Desc           string // 描述
	Status         string // 状态：0=未发布，1=已发布
	CronExpression string // cron执行表达式
	SortNodeKey    string // 排序节点标识
	SortDesc       string // 排序方式：1=倒序，2=正序
	DataTable      string // 数据表名称
	LockKey        string // 锁定key标识：0=未锁定，1=锁定，不允许修改
	MainSourceId   string // 主数据源
	SourceNodeKey  string // 数据源关联节点
	CreateBy       string // 创建者
	UpdateBy       string // 更新者
	DeletedBy      string // 删除者
	CreatedAt      string // 创建时间
	UpdatedAt      string // 更新时间
	DeletedAt      string // 删除时间
}

//  dataTemplateColumns holds the columns for table data_template.
var dataTemplateColumns = DataTemplateColumns{
	Id:             "id",
	Name:           "name",
	Key:            "key",
	Desc:           "desc",
	Status:         "status",
	CronExpression: "cron_expression",
	SortNodeKey:    "sort_node_key",
	SortDesc:       "sort_desc",
	DataTable:      "data_table",
	LockKey:        "lock_key",
	MainSourceId:   "main_source_id",
	SourceNodeKey:  "source_node_key",
	CreateBy:       "create_by",
	UpdateBy:       "update_by",
	DeletedBy:      "deleted_by",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

// NewDataTemplateDao creates and returns a new DAO object for table data access.
func NewDataTemplateDao() *DataTemplateDao {
	return &DataTemplateDao{
		group:   "default",
		table:   "data_template",
		columns: dataTemplateColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *DataTemplateDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *DataTemplateDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *DataTemplateDao) Columns() DataTemplateColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *DataTemplateDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *DataTemplateDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *DataTemplateDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
