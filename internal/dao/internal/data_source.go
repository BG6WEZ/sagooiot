// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// DataSourceDao is the data access object for table data_source.
type DataSourceDao struct {
	table   string            // table is the underlying table name of the DAO.
	group   string            // group is the database configuration group name of current DAO.
	columns DataSourceColumns // columns contains all the column names of Table for convenient usage.
}

// DataSourceColumns defines and stores column names for table data_source.
type DataSourceColumns struct {
	SourceId  string //
	Name      string // 数据源名称
	Key       string // 数据源标识
	Desc      string // 描述
	From      string // 数据来源：1=api导入，2=数据库，3=文件，4=设备
	Config    string // 数据源配置json：api配置、数据库配置、文件配置
	Rule      string // 规则配置json
	LockKey   string // 锁定key标识：0=未锁定，1=锁定，不允许修改
	Status    string // 状态：0=未发布，1=已发布
	DataTable string // 数据表名称
	CreateBy  string // 创建者
	UpdateBy  string // 更新者
	DeletedBy string // 删除者
	CreatedAt string // 创建时间
	UpdatedAt string // 更新时间
	DeletedAt string // 删除时间
}

//  dataSourceColumns holds the columns for table data_source.
var dataSourceColumns = DataSourceColumns{
	SourceId:  "source_id",
	Name:      "name",
	Key:       "key",
	Desc:      "desc",
	From:      "from",
	Config:    "config",
	Rule:      "rule",
	LockKey:   "lock_key",
	Status:    "status",
	DataTable: "data_table",
	CreateBy:  "create_by",
	UpdateBy:  "update_by",
	DeletedBy: "deleted_by",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

// NewDataSourceDao creates and returns a new DAO object for table data access.
func NewDataSourceDao() *DataSourceDao {
	return &DataSourceDao{
		group:   "default",
		table:   "data_source",
		columns: dataSourceColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *DataSourceDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *DataSourceDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *DataSourceDao) Columns() DataSourceColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *DataSourceDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *DataSourceDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *DataSourceDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
